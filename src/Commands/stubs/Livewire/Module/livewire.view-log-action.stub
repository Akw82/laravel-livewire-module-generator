<?php

namespace App\Http\Livewire\{{ model }};

use Livewire\Component;

use Carbon\Carbon;
use Livewire\WithPagination;
use App\Models\{{ model }};
use App\Http\Livewire\{{ model }}\DataTable\WithDeleteAction;
use App\Http\Livewire\{{ model }}\DataTable\WithViewLogAction;

class Index extends Component
{

    use WithPagination, WithDeleteAction, WithViewLogAction;


    /**
     * Declearing default pagination options.
     *
     */
    public $perPage = 10;
    public $perPageOptions = [10 => 10, 20 => 20, 50 => 50];
    public $showFilters = false;


    /**
     * Declearing filter variables.
     *
     */
    public $filters = [
        'search' => '',
        'status' => '',
        'user' => '',
        'date-column' => null,
        'start-date' => '',
        'end-date' => '',
        'date' => [
            'created_at' => 'Created Date',
            'updated_at' => 'Updated Date'
        ]
    ];


    /**
     * Collapse the filter and dispatch required browser events.
     *
     */
    public function collapse()
    {
        $this->showFilters = ($this->showFilters) ? false : true;
        $this->dispatchBrowserEvent('select2-selector');
    }


    /**
     * Begin querying the {{ model }} model.
     *
     * @return \App\Models\{{ model }}
     */
    public function getRowsQueryProperty()
    {
        return {{ model }}::query()
            ->when($this->filters['search'], function ($query, $search) {
                $query->where('id', 'like', '%' . $search . '%')
                    ->orwhere('title', 'like', '%' . $search . '%');
            })
            ->latest();
    }


    /**
     * Get the rows property.
     *
     */
    public function getRowsProperty()
    {
        return $this->applyPagination($this->rowsQuery);
    }


    /**
     * Paginate the given query.
     *
     */
    public function applyPagination($query)
    {
        return $query->paginate($this->perPage);
    }


    /**
     * Note: This method gets called on the initial page load 
     * AND every subsequent component update.
     * 
     * Render method is expected to return a blade view.
     * @return collection
     */
    public function render()
    {
        return view('livewire.{{ view }}.index', [
            'collections' => $this->rows,
        ]);
    }
}
